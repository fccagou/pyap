#!/usr/bin/env python
#

from __future__ import print_function

import sys
import os
import time
import signal
from threading import Thread
import wsgiref.simple_server as server
from db9 import Db9

LISTENING_PORT = 8080

OK_LED = Db9.PIN4
CRITICAL_LED = Db9.PIN7

# 3 color led.
WARNING_LED = Db9.PIN4 | Db9.PIN7

ACK = 0

current_status = OK_LED
got_security_alert = None
got_unknown_state = None

blink_secu_alert=0
blink_unk_alert=1
blink_error=2



blinks_states=[]
blinks_states.append(None)
blinks_states.append(None)
blinks_states.append(None)

serial_output = None
verbose = False

blink1=None


notifiers=[]

def log(msg):
    global verbose
    if verbose:
        print ("[+] - ",msg)
    else:
        pass

def info(msg):
    global verbose
    if verbose:
        print ("[i] - ",msg)
    else:
        pass

def warning(msg):
    global verbose
    if verbose:
        print ("[!] - ",msg)
    else:
        pass

def error(msg):
    global verbose
    if verbose:
        print ("[-] - ",msg)
    else:
        pass



def blink(led, state):

    global serial_output
    global blinks_states

    serial_output.switch_off(Db9.ALL_OUTPUT)

    while blinks_states[state] is not None:

        serial_output.switch_on(led)
        # serial_output.switch_off(WARNING_LED)
        time.sleep(0.2)
        serial_output.switch_off(led)
        # serial_output.switch_on(WARNING_LED)
        time.sleep(0.2)

try:
    # For Python 3.0 and later
    from urllib.request import urlopen
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen

import json


def poller_get_status(notifiers,url,stop):

    global serial_output
    global blinks_states
    global blink1

    while not stop():
        # get {"services":{ "ok":123, "warn":1, "crit":0, "unknown":0}}
        if blinks_states[blink_secu_alert] is None:
            try:
                services = {'crit':0, 'warn':0, 'unknown':0, 'ok':0}
                for u in url:
                    info ("[+] Get status from %s" % u )
                    poller_response = urlopen(u).read()
                    info("poller status ( %s )" % poller_response.rstrip())
                    poller_infos = json.loads(poller_response)
                    for k in poller_infos['services'].keys():
                        services[k] += poller_infos['services'][k]

                info("Global status ( %s )" % services)
                blinks_states[blink_error] = None

                if services['crit'] > 0:
                    blinks_states[blink_unk_alert] = None
                    for n in notifiers:
                        n.critical()
#                    serial_output.switch_off(Db9.ALL_OUTPUT)
#                    serial_output.switch_on(CRITICAL_LED)
#                    if blink1 is not None:
#                        blink1.critical()

                elif services['warn'] > 0:
                    blinks_states[blink_unk_alert] = None
                    for n in notifiers:
                        n.warning()
#                    serial_output.switch_off(Db9.ALL_OUTPUT)
#                    serial_output.switch_on(WARNING_LED)
#                    if blink1:
#                        blink1.warning()
                elif services['unknown'] > 0:
                    if blinks_states[blink_unk_alert] is None:
                        blinks_states[blink_unk_alert] =  1
                        Thread(target=blink, args=(OK_LED, blink_unk_alert)).start()
                        if blink1 is not None:
                            blink1.unknown()
                elif services['ok'] > 0:
                    blinks_states[blink_unk_alert] = None
                    for n in notifiers:
                        n.ok()
#                    serial_output.switch_off(Db9.ALL_OUTPUT)
#                    serial_output.switch_on(OK_LED)
#                    if blink1 is not None:
#                        blink1.ok()
                else:
                    error("json error")
            except:
                blinks_states[blink_unk_alert] = None
                if blinks_states[blink_error] is None:
                    blinks_states[blink_error] = 1
                    Thread(target=blink, args=(WARNING_LED, blink_error)).start()

                error("error while getting status %s " % (sys.exc_info()[0]))

        time.sleep(10)


def switch_on_alert(start_response, led):

    global serial_output
    global current_status
    global blinks_states

    if blinks_states[blink_secu_alert] is None:
        serial_output.switch_off(Db9.ALL_OUTPUT)
        serial_output.switch_on(led)

    current_status = led

    status = '200 OK'
    output = "led %s on\n" % led
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]


def notfound(start_response, url):

    status = '404 NOT FOUND'
    output = "%s not found\n" % url
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]


def alert_critical(start_response):
    global blink1
    if blink1 is not None:
        blink1.critical()
    return switch_on_alert(start_response, CRITICAL_LED)


def alert_warning(start_response):
    global blink1
    if blink1 is not None:
        blink1.warning()
    return switch_on_alert(start_response, WARNING_LED)


def alert_ok(start_response):
    global blink1
    if blink1 is not None:
        blink1.ok()
    return switch_on_alert(start_response, OK_LED)


def alert_security(start_response):

    global blinks_states

    if blinks_states[blink_secu_alert] is None:
        blinks_states[blink_secu_alert]=1
        Thread(target=blink, args=(CRITICAL_LED, blink_secu_alert)).start()

    status = '200 OK'
    output = "security alerte !\n"
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]


def alert_security_ack(start_response):

    global blinks_states
    blinks_states[blink_secu_alert]=None
    # wait thread ending
    time.sleep(1)
    serial_output.switch_off(Db9.ALL_OUTPUT)
    return switch_on_alert(start_response, current_status)


def alert_ack(start_response):
    global blink1
    if blink1 is not None:
        blink1.ok()

    return switch_on_alert(start_response, OK_LED)


def pyap_application(environ, start_response):

    if environ['PATH_INFO'] == "/alert/critical":
        return alert_critical(start_response)

    if environ['PATH_INFO'] == "/alert/warning":
        return alert_warning(start_response)

    if environ['PATH_INFO'] == "/alert/ok":
        return alert_ok(start_response)

    if environ['PATH_INFO'] == "/alert/ack":
        return alert_ack(start_response)

    if environ['PATH_INFO'] == "/alert/security":
        return alert_security(start_response)

    if environ['PATH_INFO'] == "/alert/security/ack":
        return alert_security_ack(start_response)

    return notfound(start_response, environ['PATH_INFO'])


def main():

    global serial_output
    global verbose
    global blink1
    global notifiers


    SERIAL_DEVICE='/dev/ttyUSB0'

    signal.signal(signal.SIGHUP, signal.getsignal(signal.SIGINT))
    signal.signal(signal.SIGTERM, signal.getsignal(signal.SIGINT))


    try:
        import argparse
        parser = argparse.ArgumentParser(
            description='Notify processor.',
            )
        USING_ARGPARSE = True
    except ImportError:
        import optparse
        parser = optparse.OptionParser(
            description='PYthon Alert Processor.')
        parser.parse_args_orig = parser.parse_args
        parser.parse_args = lambda: parser.parse_args_orig()[0]
        parser.add_argument = parser.add_option
        USING_ARGPARSE = False

    parser.add_argument('--conf', '-c',
                        help='Configuration file.')
    parser.add_argument('--tty', default=SERIAL_DEVICE,
                        help="serial device (default=%s)" % SERIAL_DEVICE)
    parser.add_argument('--server','-s', action='store_true',
                        help="Run http listening server (default=false)")
    parser.add_argument('--port', '-p', default=LISTENING_PORT, type=int,
                        help='Listening port for status push .')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='Verbose.')
    parser.add_argument('--debug', '-d', action='store_true',
                        help='Debug mode.')
    parser.add_argument('urls', nargs='*',
                        help='url for http state poller')



    args = parser.parse_args()

    if args.conf:
        execfile(args.conf)

    tty = args.tty
    verbose = args.verbose
    debug = args.debug


    try:
        from pyap.blink1_notifier import Blink1Notifier
        blink1=Blink1Notifier(state='unknown')
        log("Blink(1) found")
        notifiers.append(blink1)
    except:
        warning ("Blink(1) not found")
        blink1=None
        if debug:
            import traceback
            warning ("Blink1 error: %s " %  sys.exc_info()[0])
            print ('-'*60)
            traceback.print_exc(file=sys.stdout)
            print ('-'*60)
            warning('No Blink(1) code. Look at get-blink1.sh')


    try:
        from pyap.serial_led_notifier import SerialLedNotifier
        serial_led=SerialLedNotifier(tty,state='ok')
        log("serial_led found")
        notifiers.append(serial_led)
    except:
        warning("serial_led not found")
        serial_led=None
        if debug:
            import traceback
            warning ("SerialLed error: %s " %  sys.exc_info()[0])
            print ('-'*60)
            traceback.print_exc(file=sys.stdout)
            print ('-'*60)

    poller = None

    stop_thread=False
    try:
        if args.server:
            if args.urls:
                log("Running http poller")
                poller = Thread(target=poller_get_status, args=(notifiers, args.urls,lambda: stop_thread))
                poller.start()

            port = args.port
            httpd = server.make_server('', port, pyap_application)
            log("Serving HTTP on port %i..." % port)
            # Respond to requests until process is killed
            httpd.serve_forever()
        else:
            if args.urls:
                poller_get_status(notifiers, args.urls, lambda: stop_thread)
            else:
                print ("[+] Nothing to poll or to serve... I leave ...")
    except KeyboardInterrupt:
        log('End asked by user...bye bye !')
    except:
        print ("Unexpected error:", sys.exc_info()[0])

    log("Waiting end of process")
    stop_thread=True

    if serial_output:
        serial_output.disconnect()
    if blink1:
        blink1.off()


if __name__ == '__main__':
    main ()


