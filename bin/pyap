#!/usr/bin/env python
#

from __future__ import print_function

import sys
import os
import time
import signal
from threading import Thread
import wsgiref.simple_server as server
from db9 import Db9
import json
import ssl

try:
    # For Python 3.0 and later
    from urllib.request import urlopen
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen



# -----------------------------------------------------------------
# Global Variables.
# -----------------------------------------------------------------
# Default web server listening port
LISTENING_PORT = 8080

# For debuging
verbose = False

# This is used to set/unset security alert to blink the notifiers.
security_alert_manager = None

# Number of secondes fot autorefresh webstatus.
web_status_refresh_sec=30

# TODO: assemble NOTIFIERS, POLLERS and notifiers in new pyap/PollerPool class

# Notifiers declared notifiers in conf file or on command line.
NOTIFIERS = {}
# POLLERS declared in conf file or on command line
POLLERS = {}
# list of instanciated notifier object
notifiers=[]
STATUS_LEVEL=['crit','warn','unknown','ok']
# Document Root for static web pages.
document_root='/etc/pyap/html'

# ssl context for unverified site.
ssl_default_ctx=None

ascii_msg_christmas="""
.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:.
.     *                                       .
.    /.\                                      .
.   /..'\       Merry                         .
.   /'.'\                                     .
.  /.''.'\                                    .
.  /.'.'.\          CHRISTMAS                 .
. /'.''.'.\                                   .
. ^^^[_]^^^                                   .
.                                             .
.                                             .
.                                             .
.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:.
"""

# -----------------------------------------------------------------
# Informational functions.
# -----------------------------------------------------------------
def log(msg):
    global verbose
    if verbose:
        print ("[+] - ",msg)
    else:
        pass

def info(msg):
    global verbose
    if verbose:
        print ("[i] - ",msg)
    else:
        pass

def warning(msg):
    global verbose
    if verbose:
        print ("[!] - ",msg)
    else:
        pass

def error(msg):
    global verbose
    if verbose:
        print ("[-] - ",msg)
    else:
        pass





class SecurityAlertManager(object):

    def __init__(self, alerts={}):
	super(SecurityAlertManager, self).__init__()
	self.alerts=alerts
	self.got_alert=False
        self.current_priority=50
        self.current_fct=None
	self.thread=None

    def add(self,alert_type, priority=50,alert_fct=None):
	if not self.alerts.has_key(alert_type):
	    self.alerts[alert_type]= {'priority': priority, 'count': 1 , 'fct': alert_fct }
	else:
	    self.alerts[alert_type]['count']+=1

        info("Add secu alert %s(%d => %s)" % (alert_type, self.alerts[alert_type]['priority'], self.alerts[alert_type]['fct']))

        if self.alerts[alert_type]['priority'] < self.current_priority or not self.got_alert:
	    self.current_priority = self.alerts[alert_type]['priority']
	    self.current_fct = self.alerts[alert_type]['fct']
	    self.restart()


    def rm(self,alert_type):
	if self.alerts.has_key(alert_type) and self.alerts[alert_type]['count'] > 0:
	    self.alerts[alert_type]['count']-=1

        info("Rm secu alert %s (%d) (%d => %s)" % (alert_type, self.alerts[alert_type]['count'], self.alerts[alert_type]['priority'], self.alerts[alert_type]['fct']))
        info("Current priority is %d " % self.current_priority)

	if self.alerts[alert_type]['count'] == 0 and self.current_priority == self.alerts[alert_type]['priority']:
	    self.reload()

    def reload(self):
        self.current_priority=500
        nb=0
        info("Current priority set to %d " % self.current_priority)
	for k in self.alerts.keys():
            nb=+self.alerts[k]['count']
	    if self.alerts[k]['count'] > 0 and self.alerts[k]['priority'] < self.current_priority:
                info("Change secu alert to %s (%d) (%d => %s)" % (k, self.alerts[k]['count'], self.alerts[k]['priority'], self.alerts[k]['fct']))
                self.current_priority=self.alerts[k]['priority']
                self.current_fct=self.alerts[k]['fct']
        if nb > 0:
           self.restart()
        else:
           self.got_alert = False
           if self.thread is not None:
	      while self.thread.is_alive():
                 time.sleep(1)
	      self.thread=None
	

    def reset(self,alert_type):
	if self.alerts.has_key(alert_type) and self.alerts[alert_type]['count'] > 0:
	    self.alerts[alert_type]['count']=0

    def restart(self):
         info("Restarting AlertSecuManager")
	 if self.thread is not None:
            info("Waiting end of previous thread")
            self.got_alert = False
	    while self.thread.is_alive():
    	       time.sleep(1)

         info("Running new alert function %s " % self.current_fct)
         self.got_alert = True
         self.thread=Thread(target=self.current_fct, args=(0.6, lambda: self.got_alert))
	 self.thread.start()


    def got_alert(self):
        return self.got_alert



# -----------------------------------------------------------------
# ALERT MANAGERS
# -----------------------------------------------------------------

def am_blink(speed, again):

    global NOTIFIERS

    # Get only active notifiers.

    active_notifiers=[]
    for n in NOTIFIERS:
        if NOTIFIERS[n]['notifier'] is not None:
            active_notifiers.append(NOTIFIERS[n]['notifier'])

    while again():
        try:
            for n in active_notifiers:
                n.set_state('off')
            time.sleep(speed)
            for n in active_notifiers:
                n.set_state(n.prev_state)
            time.sleep(speed)
        except:
            error("error while getting status %s " % (sys.exc_info()[0]))
            import traceback
            warning ("error: %s " %  sys.exc_info()[0])
            print ('~'*60)
            traceback.print_exc(file=sys.stdout)
            print ('~'*60)


def am_christmas(speed, again):

    global NOTIFIERS

    # Get only active notifiers.
    from pyap.blink1_notifier import Blink1Notifier
    import random
    active_notifiers=[]
    for n in NOTIFIERS:
        if NOTIFIERS[n]['notifier'] is not None and type (NOTIFIERS[n]['notifier']) == Blink1Notifier:
            active_notifiers.append(NOTIFIERS[n]['notifier'])

    while again():
        try:
            for i in range(1,random.randint(2,10)):
               for n in active_notifiers:
                    n.blink1.fade_to_rgbn(0,0,0,0,n.led)
                    time.sleep(random.random())
                    n.blink1.fade_to_rgbn(n.fade_millis
			,random.randint(0,100)
			,random.randint(0,100)
			,random.randint(0,100)
                        ,n.led)
            for n in active_notifiers:
               getattr(n,n.state)()
            time.sleep(2.0)

        except:
            error("error while getting status %s " % (sys.exc_info()[0]))
            import traceback
            warning ("error: %s " %  sys.exc_info()[0])
            print ('~'*60)
            traceback.print_exc(file=sys.stdout)
            print ('~'*60)


# -----------------------------------------------------------------
# Poller status management.
# -----------------------------------------------------------------
def poller_get_status(notifiers,pollers,stop):
    global blinks_states
    global STATUS_LEVEL
    global security_alert_manager
    global ssl_default_ctx


    while not stop():
        # get {"services":{ "ok":123, "warn":1, "crit":0, "unknown":0}}
        try:
	    # global status by notifier.
	    status_by_notifier={}

            for p in pollers:
                try:
                    u=pollers[p]['url']
                    info ("[+] Get status from %s" % u )
                    poller_response = urlopen(u,timeout=2,context=ssl_default_ctx).read()
                    info("poller status ( %s )" % poller_response.rstrip())
                    poller_status = json.loads(poller_response)

		    notifier_name = pollers[p]['notifier']

                    if  notifier_name is not None and NOTIFIERS.has_key(notifier_name):
			if not status_by_notifier.has_key(notifier_name):
			   status_by_notifier[notifier_name] = {'crit':0, 'warn':0, 'unknown':0, 'ok':0, 'security':0}
			
                    	for k in poller_status['services'].keys():
			   # Allow dynamiq status.
			   if not status_by_notifier[notifier_name].has_key(k):
				status_by_notifier[notifier_name][k]=0
                           status_by_notifier[notifier_name][k] += int(poller_status['services'][k])

                except:
                    error("error while getting status %s " % (sys.exc_info()[0]))
            	    import traceback
            	    warning ("error: %s " %  sys.exc_info()[0])
            	    print ('.'*60)
            	    traceback.print_exc(file=sys.stdout)
            	    print ('.'*60)

	    poller_security={}

            for k in status_by_notifier.keys():

		for at in security_alert_manager.alerts.keys():
		   if status_by_notifier[k].has_key(at):
                      if not poller_security.has_key(at):
                         poller_security[at]=0

		      poller_security[at]+=status_by_notifier[k][at]


                if status_by_notifier[k]['crit'] > 0:
                    current_status='critical'

                elif status_by_notifier[k]['warn'] > 0:
                    current_status='warning'

                elif status_by_notifier[k]['unknown'] > 0:
                    current_status='unknown'

                elif status_by_notifier[k]['ok'] > 0:
                    current_status='ok'

                else:
                    error("json error")
                    current_status='unknown'

                if security_alert_manager.got_alert:
		    # FIME: UGLY because of blinking implementation Have to implement notifier.blink()
                    info("[-] - Notifier %s status ( %s )" % (k, current_status))
                    notifiers[k]['notifier'].state=current_status
		else:
                    info("[-] - Notifier %s status ( %s )" % (k, current_status))
                    notifiers[k]['notifier'].set_state(current_status)

	    for k in poller_security.keys():
		if poller_security[k] > 0:
		      security_alert_manager.reset(k)
                      security_alert_manager.add(k)
	        else:
		   security_alert_manager.rm(k)


        except:
            error("error while getting status %s " % (sys.exc_info()[0]))
            import traceback
            warning ("error: %s " %  sys.exc_info()[0])
            print ('#'*60)
            traceback.print_exc(file=sys.stdout)
            print ('#'*60)

        time.sleep(10)



# -----------------------------------------------------------------
#  HTTP API to manage notifiers status.
# -----------------------------------------------------------------

def switch_on_alert(start_response, alert_status):

    global current_global_status
    global NOTIFIERS
    global security_alert_manager

    if not security_alert_manager.got_alert :
        for n in NOTIFIERS:
            if NOTIFIERS[n]['notifier'] is not None:
                an = NOTIFIERS[n]['notifier']
                if alert_status is None:
                    alert_status = an.state

                an.set_state(alert_status)

    status = '200 OK'
    output = "Status is %s\n" % alert_status
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]


def notfound(start_response, url):

    status = '404 NOT FOUND'
    output = "%s not found\n" % url
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]


def alert_critical(start_response):
    return switch_on_alert(start_response, 'critical')


def alert_warning(start_response):
    return switch_on_alert(start_response, 'warning')


def alert_ok(start_response):
    return switch_on_alert(start_response, 'ok')


def alert_custom(start_response, alert_msg):
    status = '200 OK'
    output = "%s\n" % alert_msg
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]



def alert_security(start_response):
    global security_alert_manager
    security_alert_manager.add('api_security')
    return alert_custom(start_response, 'Security Alert !' )

def alert_security_ack(start_response):
    global security_alert_manager
    security_alert_manager.rm('api_security')
    return switch_on_alert(start_response, None)

def alert_christmas(start_response):
    global security_alert_manager
    security_alert_manager.add('api_christmas')
    return alert_custom(start_response, ascii_msg_christmas)

def alert_christmas_ack(start_response):
    global security_alert_manager
    security_alert_manager.rm('api_christmas')
    return switch_on_alert(start_response, None)

def alert_ack(start_response):
    return alert_ok(start_response)



# -----------------------------------------------------------------
# HTTP: default page showing all notifiers status.
# -----------------------------------------------------------------
def web_status(start_response):
    """Return web page with POLLERS status"""
    global POLLERS
    global security_alert_manager
    global web_status_refresh_sec
    global ssl_default_ctx

    status = "200 OK"
    output="""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>pyap status</title>

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="fccagou">
    <meta name="description" content="Get POLLERS status">
    <meta name="robots" content="all">
    <style>
    body { background: #252830; box-sizing: border-box; }
    .crit {color: white; background: #e64759; border-radius: 3px}
    .warn {color: #ff4400; background: #e4d836; border-radius: 3px}
    .unknown {color: black; background: #aa00aa; border-radius: 3px}
    .ok {color: black; background: #1bc98e; border-radius: 3px}
    .security {color: white; background: #ff0000; border-radius: 3px}
    .error {color: red; background: #aaaaaa; border-radius: 3px}
    .nb  {padding: 5px }
    .alz {padding: 10px !important }
    .desc {padding: 10px !important }
    .anj {font-weight: bold; font-size: 85%;
        letter-spacing: .15em;
        text-transform: uppercase;
    }
    .gq {float: left;}
    .gg {width: 25%}
    .ala {margin-bottom: 20px !important; margin-left: 10px}
    .fu {
       padding: 20px
    }
    </style>
    <link href="/css/style.css" rel="stylesheet" type="text/css" />
</head>
<body><div class="fu">
    """
    try:
        if security_alert_manager.got_alert:
            output+="""<div class="gq gg ala"><div class="security"><div class="alz"><span class="anj">Security ALERT</span></div><p> /!\ </p></div></div>"""

        for p in POLLERS:
	    try:

                try:
                    detail_url="""<a href="%s">more detail</a>""" % POLLERS[p]['detail_url']
                except:
                    detail_url=" "

                poller_status = json.loads(urlopen(POLLERS[p]['url'],timeout=2,context=ssl_default_ctx).read())
                log(poller_status)
                cssclass='ok'
                if poller_status['services']['crit'] > 0:
                    cssclass='crit'
                elif  poller_status['services']['warn'] > 0:
                    cssclass='warn'
                elif  poller_status['services']['unknown'] > 0:
                    cssclass='unknown'

                output+="""<div class="gq gg ala"><div class="%s"><div class="alz"><span class="anj"> %s</span></div><div class="desc"><p>%s</p><p><span class="ok nb">%s</span><span class="warn nb">%s</span><span class="crit nb">%s</span><span class="unknown nb">%s</span></p></div></div></div>""" % (cssclass,p,detail_url,poller_status['services']['ok'],poller_status['services']['warn'], poller_status['services']['crit'], poller_status['services']['unknown'])

	    except:
		cssclass='error'
                output+="""<div class="gq gg ala"><div class="%s"><div class="alz"><span class="anj"> %s</span></div><div class="desc"><p>%s</p><p>Monitoring server seems DOWN.</p></div></div></div>""" % (cssclass,p,detail_url)

        output += """</div><script>setInterval(function () { location.reload() }, %s000);</script></body></html>""" % (web_status_refresh_sec)
    except:
        status="500 INTERNAL ERROR"
        import traceback
        warning ("INTERNAL ERROR: %s " %  sys.exc_info()[0])
        print ('-'*60)
        traceback.print_exc(file=sys.stdout)
        print ('-'*60)
        output="The code seems to have an internal error :("

    log(type(output))

    response_headers = [('Content-type', 'text/html; charset=UTF-8'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [str(output)]


def web_page(start_response, path_info):
    global document_root
    filename="%s%s" % (document_root, path_info)
    # Sanitize
    filename=filename.replace('../','').replace('./','')
    try:
        output=open(filename, 'r').read()
        status = "200 OK"
    except:
        output="Page not found %s" % path_info
        status = "404 NOT FOUND"

    response_headers = [('Content-type', 'text/plain; charset=UTF-8'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [str(output)]

# -----------------------------------------------------------------
# HTTP: WEB APP
# -----------------------------------------------------------------
def pyap_application(environ, start_response):

    global ascii_msg_christmas

    if environ['PATH_INFO'] == "/alert/critical":
        return alert_critical(start_response)

    if environ['PATH_INFO'] == "/alert/warning":
        return alert_warning(start_response)

    if environ['PATH_INFO'] == "/alert/ok":
        return alert_ok(start_response)

    if environ['PATH_INFO'] == "/alert/ack":
        return alert_ack(start_response)

    if environ['PATH_INFO'] == "/alert/security":
        return alert_security(start_response)

    if environ['PATH_INFO'] == "/alert/security/ack":
        return alert_security_ack(start_response)

    if environ['PATH_INFO'] == "/alert/christmas":
        return alert_christmas(start_response)

    if environ['PATH_INFO'] == "/alert/christmas/ack":
        return alert_christmas_ack(start_response)

    if environ['PATH_INFO'].startswith("/css/"):
        return web_page(start_response, environ['PATH_INFO'])

    if environ['PATH_INFO'] == "/":
        return web_status(start_response)

    return notfound(start_response, environ['PATH_INFO'])


# -----------------------------------------------------------------
# MAIN PROGRAM.
# -----------------------------------------------------------------
def EndException(BaseException):
    def __init__(self, value):
        self.value=value
    def __str__(self):
        return repr(self.value)

def end_process(signum,frame):
    raise EndException('Signal catch')



def main(args):

    global verbose
    global notifiers
    global NOTIFIERS
    global POLLERS
    global security_alert_manager
    global document_root
    global ssl_default_ctx

    verbose = args.verbose
    debug = args.debug

    # Catch signal to quit cleanly.
    signal.signal(signal.SIGTERM, end_process)
    signal.signal(signal.SIGQUIT, end_process)

    if debug:
        log ("args list: %s " %  args)

    # Get configuration from file.
    if args.conf is not None:
        log('Using config file %s' % args.conf)
        conf = json.loads(open(args.conf, 'r').read())
        NOTIFIERS = conf['NOTIFIERS']
        if 'POLLERS' in conf.keys():
            POLLERS = conf['POLLERS']
        # kept in v0.4.x for compatibility with 0.3.x versions
        # This will be removed in next version 0.5
	elif 'URLS' in conf.keys():
            POLLERS = conf['URLS']

    if args.documentroot:
	document_root = args.documentroot
    elif conf.has_key('documentroot'):
	document_root = conf['documentroot']

    document_root = os.path.abspath(document_root)


    if conf.has_key('ssl_allow_unverified') and conf['ssl_allow_unverified'] == "True":
	ssl_default_ctx = ssl._create_unverified_context()

    if conf.has_key('ALERTMANAGERS'):
	ALERTMANAGERS=conf['ALERTMANAGERS']
    else:
	ALERTMANAGERS={}

    for k in ALERTMANAGERS.keys():
        ALERTMANAGERS[k]['count'] = 0
        ALERTMANAGERS[k]['fct'] = globals()[ALERTMANAGERS[k]['fct']]

    if not ALERTMANAGERS.has_key('api_security'):
        ALERTMANAGERS['api_security'] = {'priority':1, 'fct': am_blink, 'count': 0 }

    if not ALERTMANAGERS.has_key('api_christmas'):
        ALERTMANAGERS['api_christmas'] = {'priority':11, 'fct': am_christmas, 'count': 0 }

    if debug:
        log ("document_root: %s" % document_root)
        log ("NOTIFIERS: %s" % NOTIFIERS)
        log ("POLLERS: %s" % POLLERS)
        log ("ALERTMANAGERS: %s" % ALERTMANAGERS)

    security_alert_manager = SecurityAlertManager(ALERTMANAGERS)

    # Add notifiers passed in parameters if exist.
    if args.notifiers:
        for n in args.notifiers.split(','):
            if n == 'Blink1Notifier':
                NOTIFIERS[n] = {}
                NOTIFIERS[n]['type'] = n
                NOTIFIERS[n]['led'] = 0
                NOTIFIERS[n]['default_status'] = 'unknown'
                NOTIFIERS[n]['status'] = {}
                NOTIFIERS[n]['status']['ok'] = '#00FF00'
                NOTIFIERS[n]['status']['warn'] = '#FFFF00'
                NOTIFIERS[n]['status']['crit'] = '#FF0000'
                NOTIFIERS[n]['current_status'] = NOTIFIERS[n]['default_status']


    # Running without Notifier has no sense.
    if not len(NOTIFIERS):
        error('No notifier found !    C U Later !!')
        sys.exit(1)

    # Add Urls from parameters creating pollers
    # url form :   [poller_name[,notifier_name]=]url
    for i in range (0, len(args.urls)):
        try:
	   (poller_name,url)=args.urls[i].split('=')
           try:
		(poller_name,notifier_name) = poller_name.split(',')
		if not notifier_name in NOTIFIERS.keys():
		    notifier_name = None
	   except:
		notifier_name=None

	except:
	   poller_name="poller_arg_%d" % i
	   url = args.urls[i]

	POLLERS[poller_name] = {}
	POLLERS[poller_name]['url'] = url
	if notifier_name:
	   POLLERS[poller_name]['notifier'] = notifier_name
	else:
	   POLLERS[poller_name]['notifier'] = None

    for u in POLLERS:
        args.urls.append(POLLERS[u]['url'])

    # Creates all Notifiers objects from configuration.
    for n in NOTIFIERS:
        n_type = NOTIFIERS[n]['type']

        if n_type == 'Blink1Notifier':
            try:

                from pyap.blink1_notifier import Blink1Notifier
                NOTIFIERS[n]['notifier'] = Blink1Notifier(
                        led = NOTIFIERS[n]['led'],
                        state = NOTIFIERS[n]['default_status'],
                        ok_color = NOTIFIERS[n]['status']['ok'],
                        warn_color = NOTIFIERS[n]['status']['warn'],
                        crit_color = NOTIFIERS[n]['status']['crit'],
                        )
                log("Blink(1) found")

            except:
                NOTIFIERS[n]['notifier']=None
                warning ("Blink(1) not found")
                if debug:
                    import traceback
                    warning ("Blink1 error: %s " %  sys.exc_info()[0])
                    print ('-'*60)
                    traceback.print_exc(file=sys.stdout)
                    print ('-'*60)
                    warning('No Blink(1) code. Look at get-blink1.sh')


        elif n_type == 'SerialLedNotifier':

            try:
                from pyap.serial_led_notifier import SerialLedNotifier
                NOTIFIERS[n]['notifier'] = SerialLedNotifier(
                        NOTIFIERS[n]['tty'],
                        state=NOTIFIERS[n]['default_status'],
                        )
                log("serial_led found")

            except:
                NOTIFIERS[n]['notifier']=None
                warning("serial_led not found")
                serial_led=None
                if debug:
                    import traceback
                    warning ("SerialLed error: %s " %  sys.exc_info()[0])
                    print ('-'*60)
                    traceback.print_exc(file=sys.stdout)
                    print ('-'*60)
	else:
	    NOTIFIERS[n]['notifier']=None

    poller = None

    stop_thread=False
    try:
        if args.server:
            # If local status server is run, the polling process
            # is run in a separate thread.
            if len(POLLERS):
                log("Running http poller")
                poller = Thread(
                        target=poller_get_status,
                        args=(NOTIFIERS, POLLERS,lambda: stop_thread)
                        )
                poller.start()

            port = args.port
            httpd = server.make_server('', port, pyap_application)
            log("Serving HTTP on port %i..." % port)
            # Respond to requests until process is killed
            httpd.serve_forever()
        else:
            if len(POLLERS):
                poller_get_status(NOTIFIERS, POLLERS, lambda: stop_thread)
            else:
                print ("[+] Nothing to poll or to serve... I leave ...")
    except KeyboardInterrupt:
        log('End asked by user...bye bye !')
    except EndException as ee:
        log(ee.value)
    except:
        print ("Unexpected error:", sys.exc_info()[0])
    finally:
        # Ending all process and switch notifiers off before leaving.
        stop_thread=True
        security_alert_manager.got_alert=False

        log("Waiting end of process")
        time.sleep(2)

        for n in NOTIFIERS:
	    if NOTIFIERS[n]['notifier'] is not None:
                NOTIFIERS[n]['notifier'].off()

if __name__ == '__main__':


    # Process passed arguments.
    try:
        import argparse
        parser = argparse.ArgumentParser(
            description='Notify processor.',
            )
        USING_ARGPARSE = True
    except ImportError:
        import optparse
        parser = optparse.OptionParser(
            description='PYthon Alert Processor.')
        parser.parse_args_orig = parser.parse_args
        parser.parse_args = lambda: parser.parse_args_orig()[0]
        parser.add_argument = parser.add_option
        USING_ARGPARSE = False

    parser.add_argument('--conf', '-c',
                        help='Configuration file.')
    parser.add_argument('--notifiers', '-n',
                        help='Notifiers list in Blink1Notifier,SerialLedNotifier')
    parser.add_argument('--server','-s', action='store_true',
                        help="Run http listening server (default=false)")
    parser.add_argument('--port', '-p', default=LISTENING_PORT, type=int,
                        help='Listening port for status push .')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='Verbose.')
    parser.add_argument('--debug', '-d', action='store_true',
                        help='Debug mode.')
    parser.add_argument('--fg', action='store_true',
                        help='Forground mode. Disable daemon mode.')
    parser.add_argument('--nopid', action='store_true',
                        help='Disable writing pid file (see --pidfile)')
    parser.add_argument('--pidfile', default='/var/run/pyap.pid',
                        help='Set the pid file.')
    parser.add_argument('--documentroot', '-D', default=None,
                        help='Document root for static web pages.')
    parser.add_argument('urls', nargs='*',
                        help='url for http state poller')

    args = parser.parse_args()

    if not args.fg:
        # do the UNIX double-fork magic, see Stevens' "Advanced
        # Programming in the UNIX Environment" for details (ISBN 0201563177)
        if args.debug or args.verbose:
            log('Running daemon mode.')

        if os.fork() > 0:
            sys.exit(0)

        # Decouple from parent environment
        os.chdir('/')
        os.setsid()
        # TODO os.umask()
        # Redirect the standard I/O file descriptors to /dev/null
        if hasattr(os, "devnull"):
            REDIRECT_TO = os.devnull
        else:
            REDIRECT_TO = "/dev/null"

        fd = os.open(REDIRECT_TO, os.O_RDWR)
        os.dup2(fd, 0)  # standard input (0)
        os.dup2(fd, 1)  # standard output (1)
        os.dup2(fd, 2)  # standard error (2)

        # Double-fork magic must be single-fork for systemd
        # TODO: test under centos6 using init.
        # if os.fork() > 0:
        #     sys.exit(0)

    if not args.nopid:
        with open(args.pidfile, 'w') as f:
            f.write(str(os.getpid()))

    main (args)

    if not args.nopid:
        os.remove(args.pidfile)

    os._exit(os.EX_OK)


