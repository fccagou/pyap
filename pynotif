#!/usr/bin/env python
#

import sys
import os
import time
import thread
import wsgiref.simple_server as server
from db9 import Db9


port = 8080

OK_LED = Db9.PIN4
CRITICAL_LED = Db9.PIN7

# 3 color led.
WARNING_LED = Db9.PIN4 | Db9.PIN7

ACK = 0

current_status = OK_LED
got_security_alert = None
got_unknown_state = None

blink_secu_alert=0
blink_unk_alert=1



blinks_states=[]
blinks_states.append(None)
blinks_states.append(None)




def blink(led, state):

    global serial_output
    global blinks_states

    serial_output.switch_off(Db9.ALL_OUTPUT)

    while blinks_states[state] is not None:

        serial_output.switch_on(led)
        # serial_output.switch_off(WARNING_LED)
        time.sleep(0.2)
        serial_output.switch_off(led)
        # serial_output.switch_on(WARNING_LED)
        time.sleep(0.2)


import urllib2
import json


def nagios_get_status(url):

    global serial_output
    global blinks_states

    while 1:
        # get {"services":{ "ok":123, "warn":1, "crit":0, "unknown":0}}
        if blinks_states[blink_secu_alert] is None:
	    try:
	            nagios_response = urllib2.urlopen(url).read()
	            print "[i] - nagios status ( %s )" % nagios_response
	            nagios_infos = json.loads(nagios_response)
	            services = nagios_infos['services']
	
	            if services['crit'] > 0:
	                blinks_states[blink_unk_alert] = None 
	                serial_output.switch_off(Db9.ALL_OUTPUT)
	                serial_output.switch_on(CRITICAL_LED)
	            elif services['warn'] > 0:
	                blinks_states[blink_unk_alert] = None 
	                serial_output.switch_off(Db9.ALL_OUTPUT)
	                serial_output.switch_on(WARNING_LED)
	            elif services['unknown'] > 0:
	                blinks_states[blink_unk_alert] =  1
	                thread.start_new_thread(blink, (OK_LED, blink_unk_alert))
	            elif services['ok'] > 0:
	                blinks_states[blink_unk_alert] = None 
	                serial_output.switch_off(Db9.ALL_OUTPUT)
	                serial_output.switch_on(OK_LED)
	            else:
	                print "[!] - json error"
	    except:
		print "[!] - error while getting status"

        time.sleep(10)


def switch_on_alert(start_response, led):

    global serial_output
    global current_status 
    global blinks_states

    if blinks_states[blink_secu_alert] is None:
        serial_output.switch_off(Db9.ALL_OUTPUT)
        serial_output.switch_on(led)

    current_status = led

    status = '200 OK'
    output = "led %s on\n" % led
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]


def notfound(start_response, url):

    status = '404 NOT FOUND'
    output = "%s not found\n" % url
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]


def alert_critical(start_response):

    return switch_on_alert(start_response, CRITICAL_LED)


def alert_warning(start_response):

    return switch_on_alert(start_response, WARNING_LED)


def alert_ok(start_response):

    return switch_on_alert(start_response, OK_LED)


def alert_security(start_response):

    global blinks_states

    if blinks_states[blink_secu_alert] is None:
	blinks_states[blink_secu_alert]=1
        thread.start_new_thread(blink, (CRITICAL_LED, blink_secu_alert))

    status = '200 OK'
    output = "security alerte !\n"
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]


def alert_security_ack(start_response):

    global blinks_states
    blinks_states[blink_secu_alert]=None
    # wait thread ending
    time.sleep(1)
    serial_output.switch_off(Db9.ALL_OUTPUT)
    return switch_on_alert(start_response, current_status)


def alert_ack(start_response):

    return switch_on_alert(start_response, OK_LED)


def pynotify_application(environ, start_response):

    if environ['PATH_INFO'] == "/alert/critical":
        return alert_critical(start_response)

    if environ['PATH_INFO'] == "/alert/warning":
        return alert_warning(start_response)

    if environ['PATH_INFO'] == "/alert/ok":
        return alert_ok(start_response)

    if environ['PATH_INFO'] == "/alert/ack":
        return alert_ack(start_response)

    if environ['PATH_INFO'] == "/alert/security":
        return alert_security(start_response)

    if environ['PATH_INFO'] == "/alert/security/ack":
        return alert_security_ack(start_response)

    return notfound(start_response, environ['PATH_INFO'])


try:
    tty = sys.argv[1]
except:
    print "Usage: %s /deV/ttyXXX <nagios_url>\n" % sys.argv[0].split('/')[-1]
    sys.exit(1)


try:
    nagios_url = sys.argv[2]
    print "[+] - Running nagios poller"
    thread.start_new_thread(nagios_get_status, (nagios_url,))
except:
    pass

serial_output = Db9(tty)
serial_output.connect()
serial_output.switch_off(Db9.ALL_OUTPUT)
serial_output.switch_on(OK_LED)


httpd = server.make_server('', port, pynotify_application)


print "[+] - Serving HTTP on port %i..." % port
# Respond to requests until process is killed
httpd.serve_forever()


serial_output.disconnect()
